import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.impactdev.net/repository/development/"
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		url = "https://maven.shedaniel.me/"
	}
	maven {
		url = "https://maven.terraformersmc.com/releases/"
	}
}

loom {
	splitEnvironmentSourceSets()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("com.cobblemon:fabric:1.6.1+1.21.1")
	modImplementation "net.fabricmc:fabric-language-kotlin:1.12.3+kotlin.2.0.21"
	modApi(include("net.kyori:adventure-platform-fabric:5.14.1"))

	// --- Dependencias Opcionales Locales para Compatibilidad ---
	// Apuntamos directamente a los archivos .jar en nuestra carpeta 'libs'.
	modCompileOnly files('libs/AdvancementPlaques-1.21.1-fabric-1.6.8.jar')
	modCompileOnly files('libs/Iceberg-1.21.1-fabric-1.3.2.jar')
	
	// Xaero's integration uses runtime detection only - no compile dependencies needed
	// If you need compile-time access, manually download and place in libs/:
	// - Xaero's Minimap JAR
	// - Xaero's World Map JAR
	// Then uncomment the lines below:
	// modCompileOnly files('libs/Xaeros_Minimap_[version].jar')
	// modCompileOnly files('libs/XaerosWorldMap_[version].jar')

	// GUI Library
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	// --- FIX: Address Windows command line length limit ---
	// This forces Gradle to use a temporary JAR manifest to pass classpath arguments,
	// avoiding the character limit on Windows.
	it.options.fork = true
	it.options.forkOptions.jvmArgs += ["-Xms1G", "-Xmx2G"]
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}





