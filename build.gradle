import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

// --- CORRECCIÓN: Construimos la versión completa aquí ---
// Definimos el formato de la fecha y hora para el build.
def buildTime = new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date())
// Combinamos la versión base con el buildTime para crear la versión completa.
version = "${project.mod_version}-build-${buildTime}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.impactdev.net/repository/development/"
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		url = "https://maven.shedaniel.me/"
	}
	maven {
		url = "https://maven.terraformersmc.com/releases/"
	}
}

loom {
	splitEnvironmentSourceSets()

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("com.cobblemon:fabric:1.6.1+1.21.1")
	modImplementation "net.fabricmc:fabric-language-kotlin:1.12.3+kotlin.2.0.21"
	modApi(include("net.kyori:adventure-platform-fabric:5.14.1"))

	// --- Dependencias Opcionales Locales para Compatibilidad ---
	// Apuntamos directamente a los archivos .jar en nuestra carpeta 'libs'.
	modCompileOnly files('libs/AdvancementPlaques-1.21.1-fabric-1.6.8.jar')
	modCompileOnly files('libs/Iceberg-1.21.1-fabric-1.3.2.jar')

	// GUI Library
	//modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
	//modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// Bundle Cloth Config into the JAR to ensure it's always available.
	//include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	// --- FIX: Address Windows command line length limit ---
	// This forces Gradle to use a temporary JAR manifest to pass classpath arguments,
	// avoiding the character limit on Windows.
	it.options.fork = true
	it.options.forkOptions.jvmArgs += ["-Xms1G", "-Xmx2G"]
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// --- Bloque para personalizar el nombre del JAR ---
// Definimos una función para no repetir código.
def customizeJar(theJar) {
	theJar.from("LICENSE") {
		rename { "${it}_${project.archives_base_name}" }
	}
	theJar.archiveFileName = "${project.archives_base_name}-${project.version}.jar"
}

// Aplicamos la personalización tanto al JAR de desarrollo como al JAR final.
jar { customizeJar(it) }
remapJar {
	customizeJar(it)
	doLast {
		println "--> Generated JAR: ${it.archiveFileName.get()}"
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
	}
}


// --- Custom Task to Copy Mod to Test Environments ---
// This task automatically deploys the compiled mod to your local test folders
// for rapid testing during development.

task copyModToClient(type: Copy) {
	// Define the path to your client instance's mods folder.
	def modsDir = file("C:/Users/JOHN/curseforge/minecraft/Instances/COBBLEVERSE - Pokemon Adventure [Cobblemon]/mods")
	// Safety check: this task will only run if the target directory exists.
	onlyIf { modsDir.exists() }

	// Before copying, delete any previous versions of the mod in the target directory.
	doFirst {
		delete(fileTree(modsDir) {
			include "${project.archives_base_name}-*.jar"
		})
	}
	// Copy the final, remapped .jar file.
	from remapJar.archiveFile
	into modsDir
}

task copyModToServer(type: Copy) {
	// Define the path to your server instance's mods folder.
	def modsDir = file("C:/Users/JOHN/OneDrive/Escritorio/Cobbleverse-server/mods")
	onlyIf { modsDir.exists() }

	doFirst {
		delete(fileTree(modsDir) {
			include "${project.archives_base_name}-*.jar"
		})
	}
	from remapJar.archiveFile
	into modsDir
}

task copyModToVanillaLauncher(type: Copy) {
	// Define the path to your vanilla launcher's mods folder for the specific profile.
	def modsDir = file("C:/Users/JOHN/AppData/Roaming/.minecraft/versions/COBBLEVERSE - Pokemon Adventure [Cobblemon] COBBLEVERSE 1.5.6/mods")
	onlyIf { modsDir.exists() }

	doFirst {
		delete(fileTree(modsDir) {
			include "${project.archives_base_name}-*.jar"
		})
	}
	from remapJar.archiveFile
	into modsDir
}

// --- Custom Task to Start the Test Server ---
// This task runs after a successful deployment to automatically start your test server.
task startTestServer {
	doLast {
		// Execute the command in a doLast block to prevent Gradle from hanging.
		exec {
			workingDir "C:/Users/JOHN/OneDrive/Escritorio/Cobbleverse-server"
			// Use 'start' to launch the batch file in a new, separate terminal window.
			commandLine 'cmd', '/c', 'start', '"Poke Notifier Test Server"', 'start.bat'
		}
	}
}

// A container task that runs both copy tasks and then starts the server.
task deployToTest {
	dependsOn copyModToClient, copyModToServer, copyModToVanillaLauncher
	// After deploying, trigger the server start.
	finalizedBy startTestServer
	doLast {
		println "--> Deployed mod to client and server test environments."
	}
}

// Make the 'build' task run our deployment task when it finishes.
build.finalizedBy(deployToTest)
