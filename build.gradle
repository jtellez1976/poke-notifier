import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.impactdev.net/repository/development/"
	}
	maven {
		url "https://cursemaven.com"
	}
}

loom {
	splitEnvironmentSourceSets()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("com.cobblemon:fabric:1.6.1+1.21.1")
	modImplementation "net.fabricmc:fabric-language-kotlin:1.12.3+kotlin.2.0.21"
	modApi(include("net.kyori:adventure-platform-fabric:5.14.1"))
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// --- Bloque para personalizar el nombre del JAR ---
// Definimos una función para no repetir código.
def customizeJar(theJar) {
	theJar.from("LICENSE") {
		rename { "${it}_${project.archives_base_name}" }
	}
	def buildTime = new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date())
	theJar.archiveFileName = "${project.archives_base_name}-${project.version}-build-${buildTime}.jar"
}

// Aplicamos la personalización tanto al JAR de desarrollo como al JAR final.
jar { customizeJar(it) }
remapJar {
	customizeJar(it)
	doLast {
		println "--> Generated JAR: ${it.archiveFileName.get()}"
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
	}
}

	// --- Tarea Personalizada para Copiar el Mod al Entorno de Pruebas ---
	// Esta tarea se ejecutará después de que 'build' termine.
task copyModToTestEnvironment(type: Copy) {
    // Define la ruta de la carpeta de mods de tu instancia de CurseForge.
    def modsDir = file("C:/Users/JOHN/curseforge/minecraft/Instances/COBBLEVERSE - Pokemon Adventure [Cobblemon]/mods")

	// Esta es la condición de seguridad: la tarea solo se ejecuta si la carpeta existe.
	onlyIf { modsDir.exists() } // Ahora 'modsDir' es un objeto File y este método funcionará.

	// ANTES de copiar, borramos cualquier versión anterior del mod en la carpeta de destino.
	doFirst {
		delete(fileTree(modsDir) {
			include "${project.archives_base_name}-*.jar"
		})
		println "--> Cleaned old mod versions from target directory."
	}

    // Le decimos que copie el resultado de la tarea 'remapJar'.
    // Este es el .jar final que no tiene el sufijo '-dev'.
    from remapJar.archiveFile
    into modsDir
}

	// Hacemos que la tarea 'build' ejecute nuestra tarea de copia al finalizar.
build.finalizedBy(copyModToTestEnvironment)
